git reset --soft HEAD^ -- отмена последнего коммита 

git clean - удаляет untracked файлы

git branch -d name_branch -- удаление ветки 

git branch -m new-name-branch — переименует ветку.

git blame -L 2,+3 README — просмотреть в каком коммите была изменена(строка выведет информацию по трем строкам, начиная со второй).

git fetch origin -- обновить список веток
git branch --track feature1 origin/master -взять ветку (git branch --track release-1.4.2  origin/release-1.4.2) 

git show a810b2f  --  просмотр изменений в коммите

git config --global user.name "new_name" - изменение автора коммита
git config --global user.email you@domain.com - изменение почты автора коммита

Удаление веток на удалённом сервере
Скажем, вы и ваши соавторы закончили с нововведением и слили его в ветку master на удалённом сервере (или в какую-то другую ветку, где хранится стабильный код). Вы можете удалить ветку на удалённом сервере, используя несколько бестолковый синтаксис git push [удал. сервер] :[ветка]. Чтобы удалить ветку serverfix на сервере, выполните следующее:

$ git push origin :serverfix               -- удалить удалённую ветку
To git@github.com:schacon/simplegit.git
 - [deleted]         serverfix
слияние коммитов -- http://git-scm.com/book/ru/%D0%98%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B-Git-%D0%9F%D0%B5%D1%80%D0%B5%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D1%8C-%D0%B8%D1%81%D1%82%D0%BE%D1%80%D0%B8%D0%B8#Уплотнение-коммитов


git rebase -i HEAD~2  --  слияние коммитов


git reset --hard HEAD~2  --  откат изменений в репозитории для примера на два коммита назад

===================================================================================================================================================================================================
git rebase master


1. Отменить процесс rebase набрав в консоли 

git rebase --abort

При этом маркер HEAD, будет перенесен обратно на ветку feature, а уже добавленные коммиты повиснут в воздухе (на них не будет указывать ни один указатель) и будут вскоре удалены.

2. Разрешить конфликт в вашем любимом merge-tool'е, подготовить файлы к коммиту, набрав git add %filename%. Проделав это со всеми конфликтными файлами, продолжить процесс rebase-а набрав в консоли

git rebase --continue

При этом, если все конфликты действительно разрешены, будет создан коммит D' и rebase перейдет к следующему, в данном примере последнему шагу.

3. Если изменения, сделанные при формировании коммита B и коммита D являются полностью взаимоисключающими, причем «правильные» изменения сделаны в коммите B, то вы не сможете продолжить набрав git rebase --continue, так как разрешив конфликты обнаружите, что изменений в рабочей копии нет. В данном случае вам надо пропустить создание коммита D', набрав команду

git rebase --skip

===================================================================================================================================================================================================

Добавить файл в коммит
Осознали, что забыли добавить файл? Запустите git add, чтобы это сделать, затем выполните вышеуказанную команду.
git commit --amend

==========================================================================================================================================

отмена произвольного комита git revert хеш_код_коммита (сделает коммит, который удаляет изменения, сохраненные нежелательным коммитом).
git revert HEAD  --  Чтобы отменить коммит, нам необходимо сделать коммит, который удаляет изменения, сохраненные нежелательным коммитом.

==========================================================================================================================================
